import { useState, useEffect, useRef } from "react";
import { HubConnectionBuilder, HubConnection } from "@microsoft/signalr";
import "./App.css";

export default function ChatPage() {
  const [connection, setConnection] = useState<HubConnection | null>(null);
  const [messages, setMessages] = useState<{ user: string; text: string }[]>(
    []
  );
  const [input, setInput] = useState("");
  const [username, setUsername] = useState("");
  const [connected, setConnected] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: "smooth" });
    }
  }, [messages]);

  const connectToChat = async () => {
    if (!username) return;
    const conn = new HubConnectionBuilder()
      .withUrl("http://localhost:5000/chatHub") // Change to your backend URL
      .withAutomaticReconnect()
      .build();
    // TODO: Handle connection errors and reconnections
    conn.on("receiveMessage", (user: string, text: string) => {
      setMessages((prev) => [...prev, { user, text }]);
    });
    conn.onclose(() => {
      setConnected(false);
      setConnection(null);
    });
    conn.onreconnected(() => {
      setConnected(true);
    });
    conn.onreconnecting(() => {
      setConnected(false);
      // TODO: show an alert or notification about reconnection
      console.warn("Reconnecting to chat...");
    });
    // above are generated by AI, not sure if they are needed
    await conn.start();
    setConnection(conn);
    setConnected(true);

    await conn.invoke("JoinChat", { userId: username });
  };

  const sendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    if (connection && input) {
      await connection.invoke("SendMessage", input);
      setInput("");
    }
  };

  return (
    <main>
      <h1>Online Chat Room</h1>
      {!connected ? (
        <form
          onSubmit={(e) => {
            e.preventDefault();
            connectToChat();
          }}
        >
          <input
            type="text"
            placeholder="Enter your username"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
          />
          <button type="submit">Connect</button>
        </form>
      ) : (
        <>
          <div
            style={{
              border: "1px solid #ccc",
              height: "300px",
              overflowY: "auto",
              marginBottom: "1em",
              padding: "1em",
              background: "#222",
              color: "#fff",
            }}
          >
            {messages.map((msg, idx) => (
              <div key={idx}>
                <strong>{msg.user}:</strong> {msg.text}
              </div>
            ))}
            <div ref={messagesEndRef} />
          </div>
          <form onSubmit={sendMessage}>
            <input
              type="text"
              placeholder="Type your message"
              value={input}
              onChange={(e) => setInput(e.target.value)}
            />
            <button type="submit">Send</button>
          </form>
        </>
      )}
    </main>
  );
}
